# Upstream for your Docker Swarm application
upstream app_backend {
    server 10.201.7.242:8080 max_fails=1 fail_timeout=60s weight=100;
    server 10.201.2.208:8080 max_fails=1 fail_timeout=60s weight=1 backup;
    server 10.201.3.183:8080 max_fails=1 fail_timeout=60s weight=1 backup;
    keepalive 32;
}

# Upstream for Portainer
upstream portainer_backend {
    server 10.201.4.99:9000 max_fails=1 fail_timeout=60s weight=100;
    server 10.201.2.208:9000 max_fails=1 fail_timeout=60s weight=1 backup;
    server 10.201.3.183:9000 max_fails=1 fail_timeout=60s weight=1 backup;
    keepalive 32;
}

# Upstream for Grafana
upstream grafana_backend {
     server 10.201.4.99:3000 max_fails=1 fail_timeout=60s weight=100;
     server 10.201.2.208:3000 max_fails=1 fail_timeout=60s weight=1 backup;
     server 10.201.3.183:3000 max_fails=1 fail_timeout=60s weight=1 backup;
     keepalive 32;
}

# HTTP Server (redirects to HTTPS)
server {
    listen 3080 default_server reuseport;
    listen [::]:3080 default_server reuseport;
    server_name apps-lgtm.zero-one.cloud _;

    # Country blocking
    if ($allowed_country = no) {
        return 444;
    }

    # ACME Challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/acme-challenge;
        try_files $uri =404;
        access_log off;
    }

    # Health check
    location /nginx-health {
        access_log off;
        return 200 "nginx http healthy\n";
        add_header Content-Type text/plain;
    }

    # Redirect to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS Server for main application
server {
    listen 3443 ssl reuseport;
    listen [::]:3443 ssl reuseport;
    http2 on;
    server_name apps-lgtm.zero-one.cloud;

    set $full_url "$server_name$request_uri";

    set $naxsi_json_log 1;

    # Country blocking
    if ($allowed_country = no) {
        return 444;
    }

    # SSL Certificate configuration
    ssl_certificate /etc/nginx/ssl/wildcard.crt;
    ssl_certificate_key /etc/nginx/ssl/wildcard.key;

    # Add the RequestDenied location
    location /RequestDenied {
        internal;
        return 403;
    }

    # Main application proxy
    location / {
        # Rate limiting
        #limit_req zone=app_limit burst=20 nodelay;
        proxy_pass http://app_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port 443;

        SecRulesEnabled;
        # LearningMode;
        LibInjectionSql;
        LibInjectionXss;

        # Internal denied request.
        DeniedUrl "/RequestDenied";

        CheckRule "$SQL >= 8" BLOCK;
        CheckRule "$XSS >= 8" BLOCK;
        CheckRule "$RFI >= 8" BLOCK;
        CheckRule "$UWA >= 8" BLOCK;
        CheckRule "$EVADE >= 8" BLOCK;
        CheckRule "$UPLOAD >= 5" BLOCK;
        CheckRule "$TRAVERSAL >= 5" BLOCK;
        CheckRule "$LIBINJECTION_XSS >= 8" BLOCK;
        CheckRule "$LIBINJECTION_SQL >= 8" BLOCK;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_redirect off;
    }

    # Health check
    location /health {
        access_log off;
        proxy_pass http://app_backend/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Security - block sensitive files
    location ~ /\.(htaccess|htpasswd|env|git) {
        deny all;
    }
}

# HTTPS Server for Nginx static content
server {
    listen 3443 ssl;
    listen [::]:3443 ssl;
    http2 on;
    server_name nginx-lgtm.zero-one.cloud;

    set $full_url "$server_name$request_uri";

    # Country blocking
    if ($allowed_country = no) {
        return 444;
    }

    # SSL Certificate configuration
    ssl_certificate /etc/nginx/ssl/wildcard.crt;
    ssl_certificate_key /etc/nginx/ssl/wildcard.key;

    # Basic Authentication
    auth_basic "Restricted Area";
    auth_basic_user_file /etc/nginx/auth/.htpasswd;

    # Main location block
    location / {
        root /var/www/html;
        index report.html index.html;
    }

    location /ws {
        proxy_pass http://goaccess:7890;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # Security - block sensitive files
    location ~ /\.(htaccess|htpasswd|env|git) {
        deny all;
    }
}

# HTTPS Server for Portainer
server {
    listen 3443 ssl;
    listen [::]:3443 ssl;
    http2 on;
    server_name portainer-lgtm.zero-one.cloud;

    set $full_url "$server_name$request_uri";

    set $naxsi_json_log 1;

    ##===Ban/Drop Connections Based on GeoIP===##
    if ($allowed_country = no) {
        return 444;
    }

    # SSL Certificate configuration
    ssl_certificate /etc/nginx/ssl/wildcard.crt;
    ssl_certificate_key /etc/nginx/ssl/wildcard.key;

    # Add the RequestDenied location
    location /RequestDenied {
        internal;
        return 403;
    }

    # Portainer proxy
    location / {
        # limit_req zone=portainer_limit burst=20 nodelay;
        proxy_pass http://portainer_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port 443;

        SecRulesEnabled;
        LearningMode;
        LibInjectionSql;
        LibInjectionXss;

        # Internal denied request.
        DeniedUrl "/RequestDenied";

        CheckRule "$SQL >= 8" BLOCK;
        CheckRule "$XSS >= 8" BLOCK;
        CheckRule "$RFI >= 8" BLOCK;
        CheckRule "$UWA >= 8" BLOCK;
        CheckRule "$EVADE >= 8" BLOCK;
        CheckRule "$UPLOAD >= 5" BLOCK;
        CheckRule "$TRAVERSAL >= 5" BLOCK;
        CheckRule "$LIBINJECTION_XSS >= 8" BLOCK;
        CheckRule "$LIBINJECTION_SQL >= 8" BLOCK;

        # WebSocket support (important for Portainer)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Extended timeouts for Portainer operations
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_redirect off;

        # Portainer specific - disable buffering for real-time logs/terminal
        proxy_buffering off;
    }

    # Security - block sensitive files
    location ~ /\.(htaccess|htpasswd|env|git) {
        deny all;
    }
}

# HTTPS Server for Grafana
server {
    listen 3443 ssl;
    listen [::]:3443 ssl;
    http2 on;
    server_name grafana-lgtm.zero-one.cloud;

    set $full_url "$server_name$request_uri";

    set $naxsi_json_log 1;

    ##===Ban/Drop Connections Based on GeoIP===##
    if ($allowed_country = no) {
        return 444;
    }

    # SSL Certificate configuration
    ssl_certificate /etc/nginx/ssl/wildcard.crt;
    ssl_certificate_key /etc/nginx/ssl/wildcard.key;

    # Add the RequestDenied location
    location /RequestDenied {
        internal;
        return 403;
    }

    # Main Grafana proxy
    location / {
        # limit_req zone=grafana_limit burst=20 nodelay;
        proxy_pass http://grafana_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port 443;

        SecRulesEnabled;
        LearningMode;
        LibInjectionSql;
        LibInjectionXss;

        # Internal denied request.
        DeniedUrl "/RequestDenied";

        CheckRule "$SQL >= 8" BLOCK;
        CheckRule "$XSS >= 8" BLOCK;
        CheckRule "$RFI >= 8" BLOCK;
        CheckRule "$UWA >= 8" BLOCK;
        CheckRule "$EVADE >= 8" BLOCK;
        CheckRule "$UPLOAD >= 5" BLOCK;
        CheckRule "$TRAVERSAL >= 5" BLOCK;
        CheckRule "$LIBINJECTION_XSS >= 8" BLOCK;
        CheckRule "$LIBINJECTION_SQL >= 8" BLOCK;

        # WebSocket support for other endpoints
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Standard timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_redirect off;

        # Disable buffering for real-time updates
        proxy_buffering off;
    }

    # Security - block sensitive files
    location ~ /\.(htaccess|htpasswd|env|git) {
        deny all;
    }
}

# Default HTTPS server (catches requests with wrong/missing Host header)
server {
    listen 3443 ssl default_server;
    listen [::]:3443 ssl default_server;
    http2 on;
    server_name _;

    # Country blocking
    if ($allowed_country = no) {
        return 444;
    }

    # SSL Certificate configuration
    ssl_certificate /etc/nginx/ssl/wildcard.crt;
    ssl_certificate_key /etc/nginx/ssl/wildcard.key;

    # For any other request, close connection
    location / {
        return 444;
    }
}
